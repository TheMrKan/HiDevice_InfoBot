from aiogram import Router, html, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ErrorEvent
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from core.models import User
from core import controllers, users


router = Router(name="commands")


LIST_CONTROLLERS = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã"
ADD_CONTROLLER = "–î–æ–±–∞–≤–∏—Ç—å"
REMOVE_CONTROLLER = "–£–¥–∞–ª–∏—Ç—å"

START_MESSAGE = f"""
{html.bold("ü§ñ Hi-Garden Telegram Bot")}

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ Telegram –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ {html.link("Hi-Garden", "https://hi-garden.ru/")}.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_controller, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å MQTT –æ—Ç –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.

–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
/remove_controller - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –±–æ—Ç–∞
"""


default_keyboard = ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text=LIST_CONTROLLERS)],
                                 [KeyboardButton(text=ADD_CONTROLLER), KeyboardButton(text=REMOVE_CONTROLLER)],
                             ],
                             resize_keyboard=True
                         )

cancel_keyboard = ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")],
                             ],
                             resize_keyboard=True
                         )


logger = logging.getLogger(__name__)


@router.error()
async def error_handler(event: ErrorEvent):
    logger.exception("An error occured during handling an event", exc_info=event.exception)
    if event.update.message:
        await event.update.message.answer("‚ùå  –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=default_keyboard)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(START_MESSAGE, reply_markup=default_keyboard)


@router.message(Command("list"))
@router.message(F.text.casefold() == LIST_CONTROLLERS.casefold())
async def cmd_list(message: Message, session: AsyncSession, user: User):
    user_controllers = await users.get_user_controllers_async(session, user)
    content = "–ü—É—Å—Ç–æ" if not user_controllers else "\n".join((f"‚ñ´Ô∏è {name}" for name in user_controllers))
    await message.answer(f"{html.bold(f"‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã ‚ùó")}\n\n{content}", reply_markup=default_keyboard)


class AddControllerForm(StatesGroup):
    controller_name = State()
    controller_password = State()


@router.message(Command("add_controller"))
@router.message(F.text.casefold() == ADD_CONTROLLER.casefold())
async def cmd_add_controller(message: Message, state: FSMContext):
    await state.set_state(AddControllerForm.controller_name)
    await message.answer(f"{html.bold("‚ùóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ‚ùóÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:",
                         reply_markup=cancel_keyboard)


@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cmd_add_controller_cancel(message: Message, state: FSMContext):
    if state is None:
        return
    await state.clear()
    await message.answer("üö´  –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=default_keyboard)


@router.message(AddControllerForm.controller_name)
async def cmd_add_controller_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(controller_name=name)
    await state.set_state(AddControllerForm.controller_password)
    await message.answer(f"üîë  –ü–∞—Ä–æ–ª—å MQTT:",
                         reply_markup=cancel_keyboard)


@router.message(AddControllerForm.controller_password)
async def cmd_add_controller_password(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        password = message.text.strip()
        name = (await state.get_data())["controller_name"]

        reply = ""
        try:
            was_added = await users.authorize_controller_async(session, user, name, password)
            if was_added:
                reply = f"‚úÖ  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
            else:
                reply = f"‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"

        except users.AuthorizationError:
            reply = f"‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"

        if reply:
            await message.answer(reply,
                                 reply_markup=default_keyboard)
    finally:
        await state.clear()


class RemoveControllerForm(StatesGroup):
    controller_name = State()


@router.message(Command("remove_controller"))
@router.message(F.text.casefold() == REMOVE_CONTROLLER.casefold())
async def cmd_remove_controller(message: Message, state: FSMContext):
    await state.set_state(RemoveControllerForm.controller_name)
    await message.answer(f"{html.bold("‚ùóÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ‚ùóÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:", reply_markup=cancel_keyboard)


@router.message(RemoveControllerForm.controller_name)
async def cmd_remove_controller_name(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        name = message.text.strip()
        removed = await users.unauthorize_controller_async(session, user, name)
        reply = ""
        if removed:
            reply = "‚úÖ  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–¥–∞–ª–µ–Ω"
        else:
            reply = "‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        await message.answer(reply, reply_markup=default_keyboard)
    finally:
        await state.clear()
