from aiogram import Router, html, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ErrorEvent,
                           InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.types import BotCommand
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import logging

from core.models import User
from core import controllers, users


router = Router(name="commands")


LIST_CONTROLLERS = "–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã"
ADD_CONTROLLER = "–î–æ–±–∞–≤–∏—Ç—å"
REMOVE_CONTROLLER = "–£–¥–∞–ª–∏—Ç—å"
CONFIGURE = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å"
DIAGNOSTICS = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"

COMMAND_LIST = [
        BotCommand(command="/list", description="–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤"),
        BotCommand(command="/add_controller", description="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"),
        BotCommand(command="/remove_controller", description="–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"),
        BotCommand(command="/configure", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="/diagnostics", description="–ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
    ]

START_MESSAGE = f"""
{html.bold("ü§ñ Hi-Garden Telegram Bot")}

–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ Telegram –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ {html.link("Hi-Garden", "https://hi-garden.ru/")}.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_controller, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å MQTT –æ—Ç –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.

–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
/remove_controller - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –±–æ—Ç–∞
/configure - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/diagnostics - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
"""

NOTIFICATION_TRANSLATIONS = {
    "channel_status": "–°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤",
    "dry_mode": "–°—É—Ö–æ–π —Ä–µ–∂–∏–º",
    "clock_error": "–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤"
}


default_keyboard = ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text=LIST_CONTROLLERS)],
                                 [KeyboardButton(text=ADD_CONTROLLER), KeyboardButton(text=REMOVE_CONTROLLER)],
                                 [KeyboardButton(text=CONFIGURE), KeyboardButton(text=DIAGNOSTICS)],
                             ],
                             resize_keyboard=True
                         )

cancel_keyboard = ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")],
                             ],
                             resize_keyboard=True
                         )


logger = logging.getLogger(__name__)


def build_notifications_markup(controller_name: str, notifications: dict[str, bool]) -> InlineKeyboardMarkup:
    inline = InlineKeyboardMarkup(inline_keyboard=[[]])
    for key, enabled in notifications.items():
        text = ("üü¢" if enabled else "üî¥") + "   " + NOTIFICATION_TRANSLATIONS.get(key, key)
        inline.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=f"notification:{controller_name}:{key}")])

    return inline


def build_controller_name_markup(user_controllers: list[str]):
    keyboard = ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    for controller in user_controllers:
        keyboard.keyboard.append([KeyboardButton(text=controller)])
    keyboard.keyboard += cancel_keyboard.keyboard

    return keyboard


@router.error()
async def error_handler(event: ErrorEvent):
    logger.exception("An error occured during handling an event", exc_info=event.exception)
    if event.update.message:
        await event.update.message.answer("‚ùå  –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=default_keyboard)
    elif event.update.callback_query:
        await event.update.callback_query.answer("‚ùå  –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=default_keyboard)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(START_MESSAGE, reply_markup=default_keyboard)


@router.message(Command("list"))
@router.message(F.text.casefold() == LIST_CONTROLLERS.casefold())
async def cmd_list(message: Message, session: AsyncSession, user: User):
    user_controllers = await users.get_user_controllers_async(session, user)
    content = "–ü—É—Å—Ç–æ" if not user_controllers else "\n".join((f"‚ñ´Ô∏è {name}" for name in user_controllers))
    await message.answer(f"{html.bold(f"‚ùóÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã ‚ùó")}\n\n{content}", reply_markup=default_keyboard)


class AddControllerForm(StatesGroup):
    controller_name = State()
    controller_password = State()


@router.message(Command("add_controller"))
@router.message(F.text.casefold() == ADD_CONTROLLER.casefold())
async def cmd_add_controller(message: Message, state: FSMContext):
    await state.set_state(AddControllerForm.controller_name)
    await message.answer(f"{html.bold("‚ùóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ‚ùóÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:",
                         reply_markup=cancel_keyboard)


@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cmd_add_controller_cancel(message: Message, state: FSMContext):
    if state is None:
        return
    await state.clear()
    await message.answer("üö´  –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                         reply_markup=default_keyboard)


@router.message(AddControllerForm.controller_name)
async def cmd_add_controller_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(controller_name=name)
    await state.set_state(AddControllerForm.controller_password)
    await message.answer(f"üîë  –ü–∞—Ä–æ–ª—å MQTT:",
                         reply_markup=cancel_keyboard)


@router.message(AddControllerForm.controller_password)
async def cmd_add_controller_password(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        password = message.text.strip()
        name = (await state.get_data())["controller_name"]

        reply = ""
        try:
            was_added = await users.authorize_controller_async(session, user, name, password)
            if was_added:
                reply = f"‚úÖ  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
            else:
                reply = f"‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"

        except users.AuthorizationError:
            reply = f"‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"

        if reply:
            await message.answer(reply,
                                 reply_markup=default_keyboard)
    finally:
        await state.clear()


class RemoveControllerForm(StatesGroup):
    controller_name = State()


@router.message(Command("remove_controller"))
@router.message(F.text.casefold() == REMOVE_CONTROLLER.casefold())
async def cmd_remove_controller(message: Message, state: FSMContext, session: AsyncSession, user: User):
    await state.set_state(RemoveControllerForm.controller_name)
    user_controllers = await users.get_user_controllers_async(session, user)
    await message.answer(f"{html.bold("‚ùóÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ‚ùóÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:", reply_markup=build_controller_name_markup(user_controllers))


@router.message(RemoveControllerForm.controller_name)
async def cmd_remove_controller_name(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        name = message.text.strip()
        removed = await users.unauthorize_controller_async(session, user, name)
        reply = ""
        if removed:
            reply = "‚úÖ  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–¥–∞–ª–µ–Ω"
        else:
            reply = "‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        await message.answer(reply, reply_markup=default_keyboard)
    finally:
        await state.clear()


class ConfigureForm(StatesGroup):
    controller_name = State()


@router.message(Command("configure"))
@router.message(F.text.casefold() == CONFIGURE.casefold())
async def cmd_configure(message: Message, state: FSMContext, session: AsyncSession, user: User):
    await state.set_state(ConfigureForm.controller_name)
    user_controllers = await users.get_user_controllers_async(session, user)
    await message.answer(f"{html.bold("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚öôÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:",
                         reply_markup=build_controller_name_markup(user_controllers))


@router.message(ConfigureForm.controller_name)
async def cmd_configure_name(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        name = message.text.strip()

        if await users.has_controller_async(session, user, name):
            controller = await controllers.get_controller_async(session, name)
            notifications = controllers.get_controller_notifications(controller)

            inline = build_notifications_markup(name, notifications)

            await message.answer(text=f"‚öôÔ∏è {html.bold(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {name}")} ‚öôÔ∏è\n\n", reply_markup=inline)
            reply = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        else:
            reply = "‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"

        await message.answer(text=reply, reply_markup=default_keyboard)

    finally:
        await state.clear()


@router.callback_query(F.data.startswith('notification:'))
async def callback_notification(callback_query: CallbackQuery, session: AsyncSession, user: User):
    controller_name, notifications_key = callback_query.data.split(":")[1:3]
    if not await users.has_controller_async(session, user, controller_name):
        await callback_query.answer(text="‚ùå  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        return

    logger.info("User '%s' switched notifications '%s' for controller '%s'", user.id, notifications_key,
                controller_name)

    controller = await controllers.get_controller_async(session, controller_name)
    if controller is None:
        raise KeyError(f"Controller {controller_name!r} not found")

    new_state = await controllers.switch_notifications_async(controller, notifications_key)

    translation = NOTIFICATION_TRANSLATIONS.get(notifications_key, notifications_key)
    await callback_query.answer(text=f"{"üü¢" if new_state else "üî¥"} {translation} - {"–í–ö–õ–Æ–ß–ï–ù–û" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–û"}")

    notifications = controllers.get_controller_notifications(controller)
    inline = build_notifications_markup(controller_name, notifications)
    await callback_query.message.edit_reply_markup(reply_markup=inline)


class DiagnosticsForm(StatesGroup):
    controller_name = State()


@router.message(Command("diagnostics"))
@router.message(F.text.casefold() == DIAGNOSTICS.casefold())
async def cmd_diagnostics(message: Message, state: FSMContext, session: AsyncSession, user: User):
    await state.set_state(DiagnosticsForm.controller_name)
    user_controllers = await users.get_user_controllers_async(session, user)
    await message.answer(f"{html.bold("‚öôÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚öôÔ∏è")}\n\nüë§  –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MQTT:",
                         reply_markup=build_controller_name_markup(user_controllers))


@router.message(DiagnosticsForm.controller_name)
async def cmd_diagnostics_name(message: Message, session: AsyncSession, user: User, state: FSMContext):
    try:
        name = message.text.strip()

        if await users.has_controller_async(session, user, name):
            inline = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–∫–ª. —Å–µ–≥–æ–¥–Ω—è", callback_data=f"diagnostics:{name}:{controllers.DiagnosticsData.TODAY.name}")],
                [InlineKeyboardButton(text="–í–∫–ª. –≤—á–µ—Ä–∞", callback_data=f"diagnostics:{name}:{controllers.DiagnosticsData.YESTERDAY.name}")]
            ])

            await message.answer(text=f"‚öôÔ∏è {html.bold(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ {name}")} ‚öôÔ∏è\n\n", reply_markup=inline)
            reply = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞."
        else:
            reply = "‚ö†Ô∏è  –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω"

        await message.answer(text=reply, reply_markup=default_keyboard)

    finally:
        await state.clear()


@router.callback_query(F.data.startswith('diagnostics:'))
async def callback_notification(callback_query: CallbackQuery, session: AsyncSession, user: User):
    controller_name, diagnostics_key = callback_query.data.split(":")[1:3]
    if not await users.has_controller_async(session, user, controller_name):
        await callback_query.answer(text="‚ùå  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
        return

    logger.info("User '%s' requsting '%s' diagnostics data for controller '%s'", user.id, diagnostics_key, controller_name)

    controller = await controllers.get_controller_async(session, controller_name)
    if controller is None:
        raise KeyError(f"Controller {controller_name!r} not found")

    await controllers.request_diagnostics_async(controller, controllers.DiagnosticsData[diagnostics_key])
    await callback_query.answer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")



